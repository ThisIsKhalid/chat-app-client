"use client";

import { useEffect, useState } from "react";
import { io, Socket } from "socket.io-client";

interface Message {
  id: number;
  chatId: number;
  senderId: number;
  content: string;
  senderRole: "CUSTOMER" | "HELPER";
  createdAt: string;
}

export default function ChatPage({ params }: { params: { chatId: string } }) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState<string>("");
  const [isTyping, setIsTyping] = useState<string | null>(null);
  const [socket, setSocket] = useState<Socket | null>(null);

  const chatId = params.chatId;


  useEffect(() => {
    if (!chatId) return;

    const socketInstance = io("http://localhost:5000"); // Replace with your server URL
    setSocket(socketInstance);

    // Join the room
    socketInstance.emit("joinRoom", chatId);

    // Listen for previous messages
    socketInstance.on("loadMessages", (messages: Message[]) => {
      setMessages(messages);
    });

    // Listen for new messages
    socketInstance.on("receiveMessage", (message: Message) => {
      setMessages((prev) => [...prev, message]);
    });

    // Listen for typing indicator
    socketInstance.on("typing", (data) => {
      setIsTyping(`${data.username} is typing...`);
      setTimeout(() => setIsTyping(null), 3000);
    });

    // Clean up on unmount
    return () => {
      socketInstance.disconnect();
    };
  }, [chatId]);

  const handleSendMessage = () => {
    if (!newMessage.trim() || !socket) return;

    socket.emit("sendMessage", {
      chatroomId: chatId,
      senderId: 1, // Replace with your logged-in user ID
      content: newMessage,
      senderRole: "CUSTOMER", // Adjust based on the user's role
    });

    setNewMessage("");
  };

  const handleTyping = () => {
    socket?.emit("typing", {
      chatroomId: chatId,
      username: "Customer1", // Replace with the actual username
    });
  };

  return ( <div className="min-h-screen bg-gray-100 flex flex-col">
      <div className="flex-1 p-4 overflow-y-auto">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`mb-2 p-2 rounded-lg ${
              message.senderRole === "CUSTOMER" ? "bg-blue-500 text-white" : "bg-green-500 text-white"
            }`}
          >
            <div className="text-sm">
              {message.senderRole}: {message.content}
            </div>
            <div className="text-xs text-gray-300">{new Date(message.createdAt).toLocaleString()}</div>
          </div>
        ))}
        {isTyping && <div className="text-gray-500">{isTyping}</div>}
      </div>
      <div className="p-4 bg-white flex items-center">
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          onKeyPress={handleTyping}
          placeholder="Type your message..."
          className="flex-1 border rounded-lg p-2"
        />
        <button
          onClick={handleSendMessage}
          className="ml-2 px-4 py-2 bg-blue-500 text-white rounded-lg"
        >
          Send
        </button>
      </div>
    </div>
  )
}
